#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "heart_8x8.c"

#define GIMP_IMAGE heart // gimp_image
#define PREFIX "heart" // image

typedef struct s_sprite {
    unsigned char color1;
    unsigned char color2;    
    unsigned char data[8];
    unsigned char mask[8];
} t_sprite;


void write_data(unsigned char *output, const unsigned char *pixels);
void generate_raw_file(char *out_filename);
void generate_c_file(char *out_filename);
void convert_sprite(t_sprite *s, unsigned char *buffer);
void generate_sprite_c_file(t_sprite *s, char *out_filename);

int w, h;
long buffer_size;
unsigned char *buffer;

void main() {

    t_sprite s;

    if (GIMP_IMAGE.bytes_per_pixel != 3) {
            printf("Invalid format!\n");
            exit (-1);
    }

    w = GIMP_IMAGE.width;
    h = GIMP_IMAGE.height;
    buffer_size = w * h;

    buffer = (unsigned char *) malloc (w * h);

    write_data(buffer, GIMP_IMAGE.pixel_data);
    //generate_c_file(PREFIX"_rom.c"); // intermediate file to get colors

    if (w == 8 && h == 8) {
        convert_sprite(&s, buffer);
    } else {
        printf ("not a valid sprite! (not 8x8)\n");
        exit(-1);
    }

    generate_sprite_c_file(&s, PREFIX"_rom.c");

//    generate_raw_file(PREFIX".raw");
//    generate_c_file(PREFIX"_rom.c");

    free(buffer);
}

#define CLR_COLOR 0x00
#define COLOR1 0xFF
#define COLOR2 0xE0
#define SHADOW_COLOR 0x41

static inline void set_bit(unsigned char *x, int bitNum) {
    *x |= (1L << bitNum);
}

static inline void clr_bit(unsigned char *x, int bitNum) {
    *x &= ~(1L << bitNum);
}

void convert_sprite(t_sprite *s, unsigned char *buffer) {

    int x ,y;

    for (y = 0; y < 8; y++) {
        unsigned char data, mask;

        data = 0;
        mask = 0;
        for (x = 0; x < 8; x++) {
            unsigned char pixel = buffer[x + y * 8];

            if (pixel == 0x00) {
                clr_bit(&data, 7 - x);
                clr_bit(&mask, 7 - x);
            } else {
                if (pixel == SHADOW_COLOR) {
                    set_bit(&data, 7 - x);
                    clr_bit(&mask, 7 - x);
                } else if (pixel == COLOR1) {
                    set_bit(&mask, 7 - x);
                    clr_bit(&data, 7 - x);
                } else if (pixel == COLOR2) {
                    set_bit(&mask, 7 - x);
                    set_bit(&data, 7 - x);
                } else {
                    printf("Invalid sprite, too many colors!\n");
                    exit(-1);
                }
            }
        }
        s->mask[y] = mask;
        s->data[y] = data;
    }
    s->color1 = COLOR1;
    s->color2 = COLOR2;
}

void generate_sprite_c_file(t_sprite *s, char *out_filename) {
    FILE *outfile;
    int i;

    outfile=fopen(out_filename,"wb");
    if (outfile==NULL)
    {
        printf("cannot open %s for writing\n",out_filename);
        return;
    }

    fprintf(outfile,"/* Autogenerated file, DO NOT EDIT !!! */\n\n");
    fprintf(outfile,"const unsigned char cursor_data[] = {\n");

    for (i = 0; i < 8; i++) {
        if (i == 0) {
            fprintf(outfile, "    0x%02X", s->data[0]);
        } else {
            fprintf(outfile, ", 0x%02X", s->data[i]);
        }        
    }
    fprintf(outfile,"\n};\n");

    fprintf(outfile,"const unsigned char cursor_mask[] = {\n");

    for (i = 0; i < 8; i++) {
        if (i == 0) {
            fprintf(outfile, "    0x%02X", s->mask[0]);
        } else {
            fprintf(outfile, ", 0x%02X", s->mask[i]);
        }        
    }
    fprintf(outfile,"\n};\n");

    fclose(outfile);
    return;
}

void generate_raw_file(char *out_filename) {
    FILE *f;

    f = fopen(out_filename, "w");
    fwrite(buffer, 1, w * h, f);

    fclose(f);
}

void generate_c_file(char *out_filename) {
    FILE *outfile;
    int amount, start, i, read_count;

    outfile=fopen(out_filename,"wb");
    if (outfile==NULL)
    {
        printf("cannot open %s for writing\n",out_filename);
        return;
    }

    fprintf(outfile,"/* Autogenerated file, DO NOT EDIT !!! */\n\n");
    fprintf(outfile,"const unsigned char "PREFIX"[] = {\n");

    start = 1;
    read_count = 0;
    do
    {
        unsigned char line_buffer[8];

        if (buffer_size - read_count < 8) {
            amount = buffer_size - read_count;
        } else {
            amount = 8;
        }

        memcpy (line_buffer, buffer + read_count, amount);
        
        read_count += amount;

        if (start == 0)
        {
            fprintf(outfile, ",\n");
        }
        else
        {
            start = 0;
        }
        if (amount >= 1)
        {
            fprintf(outfile, "    0x%02X", line_buffer[0]);
        }
        for (i = 2; i < 9; i++)
        {
            if (amount >= i)
            {
                fprintf(outfile, ", 0x%02X", line_buffer[i - 1]);
            }
        }
    } while (read_count < buffer_size);

    fprintf(outfile,"\n};\n");

    fclose(outfile);
    return;
}

void write_data(unsigned char *output, const unsigned char *pixels) {
    int r, g, b;
    int i, rgb332;
    const unsigned char *ptr = pixels;

    for (i = 0; i < w * h; i++) {
        // load a pixel
        r = *ptr++;
        g = *ptr++;
        b = *ptr++;

        // conver to 332
        r = r >> 5;
        g = g >> 5;
        b = b >> 6;

        rgb332 = ((r << 5) & 0xe0) |
                 ((g << 2) & 0x1c) |
                 b & 0x03;
        output[i] = (unsigned char) rgb332;
    }

}

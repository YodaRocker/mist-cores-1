                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                              4 ; This file was generated Tue Nov  8 14:27:13 2016
                              5 ;--------------------------------------------------------
                              6 	.module widgets
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _text_hex
                             13 	.globl _text_char
                             14 	.globl _malloc
                             15 	.globl _isInLayout
                             16 	.globl _widget_redraw
                             17 	.globl _widget_event
                             18 	.globl _new_spinner
                             19 	.globl _spinner_setMin
                             20 	.globl _spinner_setMax
                             21 	.globl _spinner_incValue
                             22 	.globl _spinner_decValue
                             23 	.globl _spinner_redraw
                             24 	.globl _new_checkbox
                             25 	.globl _checkbox_setValue
                             26 	.globl _checkbox_changeValue
                             27 	.globl _checkbox_redraw
                             28 	.globl _draw_label
                             29 ;--------------------------------------------------------
                             30 ; special function registers
                             31 ;--------------------------------------------------------
                             32 ;--------------------------------------------------------
                             33 ; ram data
                             34 ;--------------------------------------------------------
                             35 	.area _DATA
                             36 ;--------------------------------------------------------
                             37 ; ram data
                             38 ;--------------------------------------------------------
                             39 	.area _INITIALIZED
                             40 ;--------------------------------------------------------
                             41 ; absolute external ram data
                             42 ;--------------------------------------------------------
                             43 	.area _DABS (ABS)
                             44 ;--------------------------------------------------------
                             45 ; global & static initialisations
                             46 ;--------------------------------------------------------
                             47 	.area _HOME
                             48 	.area _GSINIT
                             49 	.area _GSFINAL
                             50 	.area _GSINIT
                             51 ;--------------------------------------------------------
                             52 ; Home
                             53 ;--------------------------------------------------------
                             54 	.area _HOME
                             55 	.area _HOME
                             56 ;--------------------------------------------------------
                             57 ; code
                             58 ;--------------------------------------------------------
                             59 	.area _CODE
                             60 ;widgets.c:8: unsigned char isInLayout(T_Layout *layout, int x, int y) {
                             61 ;	---------------------------------
                             62 ; Function isInLayout
                             63 ; ---------------------------------
   0000                      64 _isInLayout::
   0000 DD E5         [15]   65 	push	ix
   0002 DD 21 00 00   [14]   66 	ld	ix,#0
   0006 DD 39         [15]   67 	add	ix,sp
   0008 F5            [11]   68 	push	af
                             69 ;widgets.c:9: unsigned char lx = x >> 2;
   0009 DD 6E 06      [19]   70 	ld	l,6 (ix)
   000C DD 66 07      [19]   71 	ld	h,7 (ix)
   000F CB 2C         [ 8]   72 	sra	h
   0011 CB 1D         [ 8]   73 	rr	l
   0013 CB 2C         [ 8]   74 	sra	h
   0015 CB 1D         [ 8]   75 	rr	l
   0017 DD 75 FF      [19]   76 	ld	-1 (ix),l
                             77 ;widgets.c:10: unsigned char ly = y >> 3;
   001A DD 6E 08      [19]   78 	ld	l,8 (ix)
   001D DD 66 09      [19]   79 	ld	h,9 (ix)
   0020 CB 2C         [ 8]   80 	sra	h
   0022 CB 1D         [ 8]   81 	rr	l
   0024 CB 2C         [ 8]   82 	sra	h
   0026 CB 1D         [ 8]   83 	rr	l
   0028 CB 2C         [ 8]   84 	sra	h
   002A CB 1D         [ 8]   85 	rr	l
   002C DD 75 FE      [19]   86 	ld	-2 (ix),l
                             87 ;widgets.c:12: if (	lx >= layout->x &&
   002F DD 5E 04      [19]   88 	ld	e,4 (ix)
   0032 DD 56 05      [19]   89 	ld	d,5 (ix)
   0035 1A            [ 7]   90 	ld	a,(de)
   0036 4F            [ 4]   91 	ld	c,a
   0037 DD 7E FF      [19]   92 	ld	a,-1 (ix)
   003A 91            [ 4]   93 	sub	a, c
   003B 38 44         [12]   94 	jr	C,00102$
                             95 ;widgets.c:13: lx < layout->x + layout->w &&
   003D 06 00         [ 7]   96 	ld	b,#0x00
   003F 6B            [ 4]   97 	ld	l, e
   0040 62            [ 4]   98 	ld	h, d
   0041 23            [ 6]   99 	inc	hl
   0042 23            [ 6]  100 	inc	hl
   0043 6E            [ 7]  101 	ld	l,(hl)
   0044 26 00         [ 7]  102 	ld	h,#0x00
   0046 09            [11]  103 	add	hl,bc
   0047 DD 46 FF      [19]  104 	ld	b,-1 (ix)
   004A 0E 00         [ 7]  105 	ld	c,#0x00
   004C 78            [ 4]  106 	ld	a,b
   004D 95            [ 4]  107 	sub	a, l
   004E 79            [ 4]  108 	ld	a,c
   004F 9C            [ 4]  109 	sbc	a, h
   0050 E2r55r00      [10]  110 	jp	PO, 00124$
   0053 EE 80         [ 7]  111 	xor	a, #0x80
   0055                     112 00124$:
   0055 F2r81r00      [10]  113 	jp	P,00102$
                            114 ;widgets.c:14: ly >= layout->y &&
   0058 6B            [ 4]  115 	ld	l, e
   0059 62            [ 4]  116 	ld	h, d
   005A 23            [ 6]  117 	inc	hl
   005B 4E            [ 7]  118 	ld	c,(hl)
   005C DD 7E FE      [19]  119 	ld	a,-2 (ix)
   005F 91            [ 4]  120 	sub	a, c
   0060 38 1F         [12]  121 	jr	C,00102$
                            122 ;widgets.c:15: ly < layout->y + layout->h) {
   0062 06 00         [ 7]  123 	ld	b,#0x00
   0064 EB            [ 4]  124 	ex	de,hl
   0065 23            [ 6]  125 	inc	hl
   0066 23            [ 6]  126 	inc	hl
   0067 23            [ 6]  127 	inc	hl
   0068 6E            [ 7]  128 	ld	l,(hl)
   0069 26 00         [ 7]  129 	ld	h,#0x00
   006B 09            [11]  130 	add	hl,bc
   006C DD 5E FE      [19]  131 	ld	e,-2 (ix)
   006F 16 00         [ 7]  132 	ld	d,#0x00
   0071 7B            [ 4]  133 	ld	a,e
   0072 95            [ 4]  134 	sub	a, l
   0073 7A            [ 4]  135 	ld	a,d
   0074 9C            [ 4]  136 	sbc	a, h
   0075 E2r7Ar00      [10]  137 	jp	PO, 00125$
   0078 EE 80         [ 7]  138 	xor	a, #0x80
   007A                     139 00125$:
   007A F2r81r00      [10]  140 	jp	P,00102$
                            141 ;widgets.c:16: return 1;
   007D 2E 01         [ 7]  142 	ld	l,#0x01
   007F 18 02         [12]  143 	jr	00106$
   0081                     144 00102$:
                            145 ;widgets.c:18: return 0;
   0081 2E 00         [ 7]  146 	ld	l,#0x00
   0083                     147 00106$:
   0083 DD F9         [10]  148 	ld	sp, ix
   0085 DD E1         [14]  149 	pop	ix
   0087 C9            [10]  150 	ret
                            151 ;widgets.c:21: void widget_redraw(T_Widget *widget) {
                            152 ;	---------------------------------
                            153 ; Function widget_redraw
                            154 ; ---------------------------------
   0088                     155 _widget_redraw::
                            156 ;widgets.c:23: if (widget != NULL)
   0088 21 03 00      [10]  157 	ld	hl, #2+1
   008B 39            [11]  158 	add	hl, sp
   008C 7E            [ 7]  159 	ld	a, (hl)
   008D 2B            [ 6]  160 	dec	hl
   008E B6            [ 7]  161 	or	a,(hl)
   008F C8            [11]  162 	ret	Z
                            163 ;widgets.c:24: switch(widget->type) {
   0090 C1            [10]  164 	pop	bc
   0091 E1            [10]  165 	pop	hl
   0092 E5            [11]  166 	push	hl
   0093 C5            [11]  167 	push	bc
   0094 66            [ 7]  168 	ld	h,(hl)
   0095 7C            [ 4]  169 	ld	a,h
   0096 B7            [ 4]  170 	or	a, a
   0097 28 04         [12]  171 	jr	Z,00101$
   0099 25            [ 4]  172 	dec	h
   009A 28 0B         [12]  173 	jr	Z,00102$
   009C C9            [10]  174 	ret
                            175 ;widgets.c:25: case SPINNER:
   009D                     176 00101$:
                            177 ;widgets.c:26: spinner_redraw((T_Spinner *)widget);
   009D C1            [10]  178 	pop	bc
   009E E1            [10]  179 	pop	hl
   009F E5            [11]  180 	push	hl
   00A0 C5            [11]  181 	push	bc
   00A1 E5            [11]  182 	push	hl
   00A2 CDr86r02      [17]  183 	call	_spinner_redraw
   00A5 F1            [10]  184 	pop	af
                            185 ;widgets.c:27: break;
   00A6 C9            [10]  186 	ret
                            187 ;widgets.c:28: case CHECKBOX:
   00A7                     188 00102$:
                            189 ;widgets.c:29: checkbox_redraw((T_Checkbox *)widget);
   00A7 C1            [10]  190 	pop	bc
   00A8 E1            [10]  191 	pop	hl
   00A9 E5            [11]  192 	push	hl
   00AA C5            [11]  193 	push	bc
   00AB E5            [11]  194 	push	hl
   00AC CDr6Cr03      [17]  195 	call	_checkbox_redraw
   00AF F1            [10]  196 	pop	af
                            197 ;widgets.c:33: }
   00B0 C9            [10]  198 	ret
                            199 ;widgets.c:36: void widget_event(T_Widget *widget, E_Event event) {
                            200 ;	---------------------------------
                            201 ; Function widget_event
                            202 ; ---------------------------------
   00B1                     203 _widget_event::
   00B1 DD E5         [15]  204 	push	ix
   00B3 DD 21 00 00   [14]  205 	ld	ix,#0
   00B7 DD 39         [15]  206 	add	ix,sp
                            207 ;widgets.c:38: if (widget != NULL) {
   00B9 DD 7E 05      [19]  208 	ld	a,5 (ix)
   00BC DD B6 04      [19]  209 	or	a,4 (ix)
   00BF 28 53         [12]  210 	jr	Z,00114$
                            211 ;widgets.c:39: switch(widget->type) {
   00C1 DD 4E 04      [19]  212 	ld	c,4 (ix)
   00C4 DD 46 05      [19]  213 	ld	b,5 (ix)
   00C7 0A            [ 7]  214 	ld	a,(bc)
   00C8 67            [ 4]  215 	ld	h,a
   00C9 B7            [ 4]  216 	or	a, a
   00CA 28 05         [12]  217 	jr	Z,00101$
   00CC 25            [ 4]  218 	dec	h
   00CD 28 26         [12]  219 	jr	Z,00107$
   00CF 18 31         [12]  220 	jr	00109$
                            221 ;widgets.c:40: case SPINNER:
   00D1                     222 00101$:
                            223 ;widgets.c:42: spinner_incValue((T_Spinner *)widget);
   00D1 DD 6E 04      [19]  224 	ld	l,4 (ix)
   00D4 DD 66 05      [19]  225 	ld	h,5 (ix)
                            226 ;widgets.c:41: if (event == EVENT_LEFT_CLICK)
   00D7 DD 7E 06      [19]  227 	ld	a,6 (ix)
   00DA B7            [ 4]  228 	or	a, a
   00DB 20 09         [12]  229 	jr	NZ,00105$
                            230 ;widgets.c:42: spinner_incValue((T_Spinner *)widget);
   00DD C5            [11]  231 	push	bc
   00DE E5            [11]  232 	push	hl
   00DF CDr15r02      [17]  233 	call	_spinner_incValue
   00E2 F1            [10]  234 	pop	af
   00E3 C1            [10]  235 	pop	bc
   00E4 18 1C         [12]  236 	jr	00109$
   00E6                     237 00105$:
                            238 ;widgets.c:43: else if (event == EVENT_RIGHT_CLICK)
   00E6 DD 7E 06      [19]  239 	ld	a,6 (ix)
   00E9 3D            [ 4]  240 	dec	a
   00EA 20 16         [12]  241 	jr	NZ,00109$
                            242 ;widgets.c:44: spinner_decValue((T_Spinner *)widget);
   00EC C5            [11]  243 	push	bc
   00ED E5            [11]  244 	push	hl
   00EE CDr4Er02      [17]  245 	call	_spinner_decValue
   00F1 F1            [10]  246 	pop	af
   00F2 C1            [10]  247 	pop	bc
                            248 ;widgets.c:45: break;
   00F3 18 0D         [12]  249 	jr	00109$
                            250 ;widgets.c:46: case CHECKBOX:
   00F5                     251 00107$:
                            252 ;widgets.c:47: checkbox_changeValue((T_Checkbox *)widget);
   00F5 DD 6E 04      [19]  253 	ld	l,4 (ix)
   00F8 DD 66 05      [19]  254 	ld	h,5 (ix)
   00FB C5            [11]  255 	push	bc
   00FC E5            [11]  256 	push	hl
   00FD CDr3Cr03      [17]  257 	call	_checkbox_changeValue
   0100 F1            [10]  258 	pop	af
   0101 C1            [10]  259 	pop	bc
                            260 ;widgets.c:51: }
   0102                     261 00109$:
                            262 ;widgets.c:52: if (widget->callback != NULL)
   0102 C5            [11]  263 	push	bc
   0103 FD E1         [14]  264 	pop	iy
   0105 FD 6E 06      [19]  265 	ld	l,6 (iy)
   0108 FD 66 07      [19]  266 	ld	h,7 (iy)
   010B 7C            [ 4]  267 	ld	a,h
   010C B5            [ 4]  268 	or	a,l
   010D 28 05         [12]  269 	jr	Z,00114$
                            270 ;widgets.c:53: widget->callback(widget);
   010F C5            [11]  271 	push	bc
   0110 CDr00r00      [17]  272 	call	___sdcc_call_hl
   0113 F1            [10]  273 	pop	af
   0114                     274 00114$:
   0114 DD E1         [14]  275 	pop	ix
   0116 C9            [10]  276 	ret
                            277 ;widgets.c:57: T_Spinner *new_spinner(unsigned char x, unsigned char y) {
                            278 ;	---------------------------------
                            279 ; Function new_spinner
                            280 ; ---------------------------------
   0117                     281 _new_spinner::
                            282 ;widgets.c:59: T_Spinner *spinner = (T_Spinner *) malloc(sizeof(T_Spinner));
   0117 21 0B 00      [10]  283 	ld	hl,#0x000B
   011A E5            [11]  284 	push	hl
   011B CDr00r00      [17]  285 	call	_malloc
   011E F1            [10]  286 	pop	af
   011F EB            [ 4]  287 	ex	de,hl
                            288 ;widgets.c:61: spinner->widget.type = SPINNER;
   0120 AF            [ 4]  289 	xor	a, a
   0121 12            [ 7]  290 	ld	(de),a
                            291 ;widgets.c:62: spinner->widget.layout.x = x;
   0122 6B            [ 4]  292 	ld	l, e
   0123 62            [ 4]  293 	ld	h, d
   0124 23            [ 6]  294 	inc	hl
   0125 FD 21 02 00   [14]  295 	ld	iy,#2
   0129 FD 39         [15]  296 	add	iy,sp
   012B FD 7E 00      [19]  297 	ld	a,0 (iy)
   012E 77            [ 7]  298 	ld	(hl),a
                            299 ;widgets.c:63: spinner->widget.layout.y = y;
   012F 6B            [ 4]  300 	ld	l, e
   0130 62            [ 4]  301 	ld	h, d
   0131 23            [ 6]  302 	inc	hl
   0132 23            [ 6]  303 	inc	hl
   0133 FD 21 03 00   [14]  304 	ld	iy,#3
   0137 FD 39         [15]  305 	add	iy,sp
   0139 FD 7E 00      [19]  306 	ld	a,0 (iy)
   013C 77            [ 7]  307 	ld	(hl),a
                            308 ;widgets.c:64: spinner->widget.layout.w = 2;
   013D 6B            [ 4]  309 	ld	l, e
   013E 62            [ 4]  310 	ld	h, d
   013F 23            [ 6]  311 	inc	hl
   0140 23            [ 6]  312 	inc	hl
   0141 23            [ 6]  313 	inc	hl
   0142 36 02         [10]  314 	ld	(hl),#0x02
                            315 ;widgets.c:65: spinner->widget.layout.h = 1;
   0144 21 04 00      [10]  316 	ld	hl,#0x0004
   0147 19            [11]  317 	add	hl,de
   0148 36 01         [10]  318 	ld	(hl),#0x01
                            319 ;widgets.c:66: spinner->widget.callback = NULL;
   014A 21 06 00      [10]  320 	ld	hl,#0x0006
   014D 19            [11]  321 	add	hl,de
   014E AF            [ 4]  322 	xor	a, a
   014F 77            [ 7]  323 	ld	(hl), a
   0150 23            [ 6]  324 	inc	hl
   0151 77            [ 7]  325 	ld	(hl), a
                            326 ;widgets.c:67: spinner->widget.dirty = 0;
   0152 21 05 00      [10]  327 	ld	hl,#0x0005
   0155 19            [11]  328 	add	hl,de
   0156 36 00         [10]  329 	ld	(hl),#0x00
                            330 ;widgets.c:69: spinner->min = 0;
   0158 21 08 00      [10]  331 	ld	hl,#0x0008
   015B 19            [11]  332 	add	hl,de
   015C 36 00         [10]  333 	ld	(hl),#0x00
                            334 ;widgets.c:70: spinner->max = 255;
   015E 21 09 00      [10]  335 	ld	hl,#0x0009
   0161 19            [11]  336 	add	hl,de
   0162 36 FF         [10]  337 	ld	(hl),#0xFF
                            338 ;widgets.c:71: spinner->value = 127;
   0164 21 0A 00      [10]  339 	ld	hl,#0x000A
   0167 19            [11]  340 	add	hl,de
   0168 36 7F         [10]  341 	ld	(hl),#0x7F
                            342 ;widgets.c:73: return spinner;
   016A EB            [ 4]  343 	ex	de,hl
   016B C9            [10]  344 	ret
                            345 ;widgets.c:76: void spinner_setMin(T_Spinner *spinner, unsigned char min) {
                            346 ;	---------------------------------
                            347 ; Function spinner_setMin
                            348 ; ---------------------------------
   016C                     349 _spinner_setMin::
   016C DD E5         [15]  350 	push	ix
   016E DD 21 00 00   [14]  351 	ld	ix,#0
   0172 DD 39         [15]  352 	add	ix,sp
   0174 F5            [11]  353 	push	af
                            354 ;widgets.c:78: if (spinner != NULL && min < spinner->max) {
   0175 DD 7E 05      [19]  355 	ld	a,5 (ix)
   0178 DD B6 04      [19]  356 	or	a,4 (ix)
   017B 28 3F         [12]  357 	jr	Z,00106$
   017D DD 4E 04      [19]  358 	ld	c,4 (ix)
   0180 DD 46 05      [19]  359 	ld	b,5 (ix)
   0183 C5            [11]  360 	push	bc
   0184 FD E1         [14]  361 	pop	iy
   0186 FD 66 09      [19]  362 	ld	h,9 (iy)
   0189 DD 7E 06      [19]  363 	ld	a,6 (ix)
   018C 94            [ 4]  364 	sub	a, h
   018D 30 2D         [12]  365 	jr	NC,00106$
                            366 ;widgets.c:79: spinner->min = min;
   018F FD 21 08 00   [14]  367 	ld	iy,#0x0008
   0193 FD 09         [15]  368 	add	iy, bc
   0195 DD 7E 06      [19]  369 	ld	a,6 (ix)
   0198 FD 77 00      [19]  370 	ld	0 (iy), a
                            371 ;widgets.c:80: if (spinner->value < spinner->min) {
   019B 21 0A 00      [10]  372 	ld	hl,#0x000A
   019E 09            [11]  373 	add	hl,bc
   019F EB            [ 4]  374 	ex	de,hl
   01A0 1A            [ 7]  375 	ld	a,(de)
   01A1 DD 77 FE      [19]  376 	ld	-2 (ix),a
   01A4 FD 7E 00      [19]  377 	ld	a, 0 (iy)
   01A7 DD 77 FF      [19]  378 	ld	-1 (ix),a
   01AA DD 7E FE      [19]  379 	ld	a,-2 (ix)
   01AD DD 96 06      [19]  380 	sub	a, 6 (ix)
   01B0 30 04         [12]  381 	jr	NC,00102$
                            382 ;widgets.c:81: spinner->value = spinner->min;
   01B2 DD 7E FF      [19]  383 	ld	a,-1 (ix)
   01B5 12            [ 7]  384 	ld	(de),a
   01B6                     385 00102$:
                            386 ;widgets.c:83: spinner->widget.dirty = 1;
   01B6 21 05 00      [10]  387 	ld	hl,#0x0005
   01B9 09            [11]  388 	add	hl,bc
   01BA 36 01         [10]  389 	ld	(hl),#0x01
   01BC                     390 00106$:
   01BC DD F9         [10]  391 	ld	sp, ix
   01BE DD E1         [14]  392 	pop	ix
   01C0 C9            [10]  393 	ret
                            394 ;widgets.c:87: void spinner_setMax(T_Spinner *spinner, unsigned char max) {
                            395 ;	---------------------------------
                            396 ; Function spinner_setMax
                            397 ; ---------------------------------
   01C1                     398 _spinner_setMax::
   01C1 DD E5         [15]  399 	push	ix
   01C3 DD 21 00 00   [14]  400 	ld	ix,#0
   01C7 DD 39         [15]  401 	add	ix,sp
   01C9 F5            [11]  402 	push	af
                            403 ;widgets.c:89: if (spinner != NULL && max > spinner->min) {
   01CA DD 7E 05      [19]  404 	ld	a,5 (ix)
   01CD DD B6 04      [19]  405 	or	a,4 (ix)
   01D0 28 3E         [12]  406 	jr	Z,00106$
   01D2 DD 4E 04      [19]  407 	ld	c,4 (ix)
   01D5 DD 46 05      [19]  408 	ld	b,5 (ix)
   01D8 C5            [11]  409 	push	bc
   01D9 FD E1         [14]  410 	pop	iy
   01DB FD 7E 08      [19]  411 	ld	a, 8 (iy)
   01DE DD 96 06      [19]  412 	sub	a, 6 (ix)
   01E1 30 2D         [12]  413 	jr	NC,00106$
                            414 ;widgets.c:90: spinner->max = max;
   01E3 FD 21 09 00   [14]  415 	ld	iy,#0x0009
   01E7 FD 09         [15]  416 	add	iy, bc
   01E9 DD 7E 06      [19]  417 	ld	a,6 (ix)
   01EC FD 77 00      [19]  418 	ld	0 (iy), a
                            419 ;widgets.c:91: if (spinner->value > spinner->max) {
   01EF 21 0A 00      [10]  420 	ld	hl,#0x000A
   01F2 09            [11]  421 	add	hl,bc
   01F3 EB            [ 4]  422 	ex	de,hl
   01F4 1A            [ 7]  423 	ld	a,(de)
   01F5 DD 77 FF      [19]  424 	ld	-1 (ix),a
   01F8 FD 7E 00      [19]  425 	ld	a, 0 (iy)
   01FB DD 77 FE      [19]  426 	ld	-2 (ix),a
   01FE DD 7E 06      [19]  427 	ld	a,6 (ix)
   0201 DD 96 FF      [19]  428 	sub	a, -1 (ix)
   0204 30 04         [12]  429 	jr	NC,00102$
                            430 ;widgets.c:92: spinner->value = spinner->max;
   0206 DD 7E FE      [19]  431 	ld	a,-2 (ix)
   0209 12            [ 7]  432 	ld	(de),a
   020A                     433 00102$:
                            434 ;widgets.c:94: spinner->widget.dirty = 1;
   020A 21 05 00      [10]  435 	ld	hl,#0x0005
   020D 09            [11]  436 	add	hl,bc
   020E 36 01         [10]  437 	ld	(hl),#0x01
   0210                     438 00106$:
   0210 DD F9         [10]  439 	ld	sp, ix
   0212 DD E1         [14]  440 	pop	ix
   0214 C9            [10]  441 	ret
                            442 ;widgets.c:98: void spinner_incValue(T_Spinner *spinner) {
                            443 ;	---------------------------------
                            444 ; Function spinner_incValue
                            445 ; ---------------------------------
   0215                     446 _spinner_incValue::
   0215 DD E5         [15]  447 	push	ix
   0217 DD 21 00 00   [14]  448 	ld	ix,#0
   021B DD 39         [15]  449 	add	ix,sp
                            450 ;widgets.c:100: if (spinner != NULL && spinner->value < spinner->max) {
   021D DD 7E 05      [19]  451 	ld	a,5 (ix)
   0220 DD B6 04      [19]  452 	or	a,4 (ix)
   0223 28 26         [12]  453 	jr	Z,00104$
   0225 DD 5E 04      [19]  454 	ld	e,4 (ix)
   0228 DD 56 05      [19]  455 	ld	d,5 (ix)
   022B FD 21 0A 00   [14]  456 	ld	iy,#0x000A
   022F FD 19         [15]  457 	add	iy, de
   0231 FD 4E 00      [19]  458 	ld	c, 0 (iy)
   0234 6B            [ 4]  459 	ld	l, e
   0235 62            [ 4]  460 	ld	h, d
   0236 C5            [11]  461 	push	bc
   0237 01 09 00      [10]  462 	ld	bc, #0x0009
   023A 09            [11]  463 	add	hl, bc
   023B C1            [10]  464 	pop	bc
   023C 6E            [ 7]  465 	ld	l,(hl)
   023D 79            [ 4]  466 	ld	a,c
   023E 95            [ 4]  467 	sub	a, l
   023F 30 0A         [12]  468 	jr	NC,00104$
                            469 ;widgets.c:101: spinner->value ++;
   0241 0C            [ 4]  470 	inc	c
   0242 FD 71 00      [19]  471 	ld	0 (iy), c
                            472 ;widgets.c:102: spinner->widget.dirty = 1;
   0245 21 05 00      [10]  473 	ld	hl,#0x0005
   0248 19            [11]  474 	add	hl,de
   0249 36 01         [10]  475 	ld	(hl),#0x01
   024B                     476 00104$:
   024B DD E1         [14]  477 	pop	ix
   024D C9            [10]  478 	ret
                            479 ;widgets.c:106: void spinner_decValue(T_Spinner *spinner) {
                            480 ;	---------------------------------
                            481 ; Function spinner_decValue
                            482 ; ---------------------------------
   024E                     483 _spinner_decValue::
   024E DD E5         [15]  484 	push	ix
   0250 DD 21 00 00   [14]  485 	ld	ix,#0
   0254 DD 39         [15]  486 	add	ix,sp
                            487 ;widgets.c:108: if (spinner != NULL && spinner->value > spinner->min) {
   0256 DD 7E 05      [19]  488 	ld	a,5 (ix)
   0259 DD B6 04      [19]  489 	or	a,4 (ix)
   025C 28 25         [12]  490 	jr	Z,00104$
   025E DD 5E 04      [19]  491 	ld	e,4 (ix)
   0261 DD 56 05      [19]  492 	ld	d,5 (ix)
   0264 FD 21 0A 00   [14]  493 	ld	iy,#0x000A
   0268 FD 19         [15]  494 	add	iy, de
   026A FD 4E 00      [19]  495 	ld	c, 0 (iy)
   026D 6B            [ 4]  496 	ld	l, e
   026E 62            [ 4]  497 	ld	h, d
   026F C5            [11]  498 	push	bc
   0270 01 08 00      [10]  499 	ld	bc, #0x0008
   0273 09            [11]  500 	add	hl, bc
   0274 C1            [10]  501 	pop	bc
   0275 7E            [ 7]  502 	ld	a, (hl)
   0276 91            [ 4]  503 	sub	a, c
   0277 30 0A         [12]  504 	jr	NC,00104$
                            505 ;widgets.c:109: spinner->value --;
   0279 0D            [ 4]  506 	dec	c
   027A FD 71 00      [19]  507 	ld	0 (iy), c
                            508 ;widgets.c:110: spinner->widget.dirty = 1;
   027D 21 05 00      [10]  509 	ld	hl,#0x0005
   0280 19            [11]  510 	add	hl,de
   0281 36 01         [10]  511 	ld	(hl),#0x01
   0283                     512 00104$:
   0283 DD E1         [14]  513 	pop	ix
   0285 C9            [10]  514 	ret
                            515 ;widgets.c:114: void spinner_redraw(T_Spinner *spinner) {
                            516 ;	---------------------------------
                            517 ; Function spinner_redraw
                            518 ; ---------------------------------
   0286                     519 _spinner_redraw::
   0286 DD E5         [15]  520 	push	ix
   0288 DD 21 00 00   [14]  521 	ld	ix,#0
   028C DD 39         [15]  522 	add	ix,sp
                            523 ;widgets.c:115: unsigned char *dst = SCRPTR(spinner->widget.layout.x, spinner->widget.layout.y);
   028E DD 4E 04      [19]  524 	ld	c,4 (ix)
   0291 DD 46 05      [19]  525 	ld	b,5 (ix)
   0294 69            [ 4]  526 	ld	l, c
   0295 60            [ 4]  527 	ld	h, b
   0296 23            [ 6]  528 	inc	hl
   0297 5E            [ 7]  529 	ld	e,(hl)
   0298 16 00         [ 7]  530 	ld	d,#0x00
   029A 69            [ 4]  531 	ld	l, c
   029B 60            [ 4]  532 	ld	h, b
   029C 23            [ 6]  533 	inc	hl
   029D 23            [ 6]  534 	inc	hl
   029E 6E            [ 7]  535 	ld	l,(hl)
   029F 26 00         [ 7]  536 	ld	h,#0x00
   02A1 29            [11]  537 	add	hl, hl
   02A2 29            [11]  538 	add	hl, hl
   02A3 29            [11]  539 	add	hl, hl
   02A4 D5            [11]  540 	push	de
   02A5 5D            [ 4]  541 	ld	e, l
   02A6 54            [ 4]  542 	ld	d, h
   02A7 29            [11]  543 	add	hl, hl
   02A8 29            [11]  544 	add	hl, hl
   02A9 19            [11]  545 	add	hl, de
   02AA 29            [11]  546 	add	hl, hl
   02AB 29            [11]  547 	add	hl, hl
   02AC 29            [11]  548 	add	hl, hl
   02AD 29            [11]  549 	add	hl, hl
   02AE D1            [10]  550 	pop	de
   02AF 19            [11]  551 	add	hl,de
   02B0 EB            [ 4]  552 	ex	de,hl
                            553 ;widgets.c:117: spinner->widget.dirty = 0;
   02B1 21 05 00      [10]  554 	ld	hl,#0x0005
   02B4 09            [11]  555 	add	hl,bc
   02B5 36 00         [10]  556 	ld	(hl),#0x00
                            557 ;widgets.c:118: text_hex(dst, spinner->value);
   02B7 C5            [11]  558 	push	bc
   02B8 FD E1         [14]  559 	pop	iy
   02BA FD 66 0A      [19]  560 	ld	h,10 (iy)
   02BD E5            [11]  561 	push	hl
   02BE 33            [ 6]  562 	inc	sp
   02BF D5            [11]  563 	push	de
   02C0 CDr00r00      [17]  564 	call	_text_hex
   02C3 F1            [10]  565 	pop	af
   02C4 33            [ 6]  566 	inc	sp
   02C5 DD E1         [14]  567 	pop	ix
   02C7 C9            [10]  568 	ret
                            569 ;widgets.c:121: T_Checkbox *new_checkbox(unsigned char x, unsigned char y) {
                            570 ;	---------------------------------
                            571 ; Function new_checkbox
                            572 ; ---------------------------------
   02C8                     573 _new_checkbox::
                            574 ;widgets.c:122: T_Checkbox *checkbox = (T_Checkbox *) malloc(sizeof(T_Checkbox));
   02C8 21 09 00      [10]  575 	ld	hl,#0x0009
   02CB E5            [11]  576 	push	hl
   02CC CDr00r00      [17]  577 	call	_malloc
   02CF F1            [10]  578 	pop	af
   02D0 EB            [ 4]  579 	ex	de,hl
                            580 ;widgets.c:124: checkbox->widget.type = CHECKBOX;
   02D1 3E 01         [ 7]  581 	ld	a,#0x01
   02D3 12            [ 7]  582 	ld	(de),a
                            583 ;widgets.c:125: checkbox->widget.layout.x = x;
   02D4 6B            [ 4]  584 	ld	l, e
   02D5 62            [ 4]  585 	ld	h, d
   02D6 23            [ 6]  586 	inc	hl
   02D7 FD 21 02 00   [14]  587 	ld	iy,#2
   02DB FD 39         [15]  588 	add	iy,sp
   02DD FD 7E 00      [19]  589 	ld	a,0 (iy)
   02E0 77            [ 7]  590 	ld	(hl),a
                            591 ;widgets.c:126: checkbox->widget.layout.y = y;
   02E1 6B            [ 4]  592 	ld	l, e
   02E2 62            [ 4]  593 	ld	h, d
   02E3 23            [ 6]  594 	inc	hl
   02E4 23            [ 6]  595 	inc	hl
   02E5 FD 21 03 00   [14]  596 	ld	iy,#3
   02E9 FD 39         [15]  597 	add	iy,sp
   02EB FD 7E 00      [19]  598 	ld	a,0 (iy)
   02EE 77            [ 7]  599 	ld	(hl),a
                            600 ;widgets.c:127: checkbox->widget.layout.w = 2;
   02EF 6B            [ 4]  601 	ld	l, e
   02F0 62            [ 4]  602 	ld	h, d
   02F1 23            [ 6]  603 	inc	hl
   02F2 23            [ 6]  604 	inc	hl
   02F3 23            [ 6]  605 	inc	hl
   02F4 36 02         [10]  606 	ld	(hl),#0x02
                            607 ;widgets.c:128: checkbox->widget.layout.h = 1;
   02F6 21 04 00      [10]  608 	ld	hl,#0x0004
   02F9 19            [11]  609 	add	hl,de
   02FA 36 01         [10]  610 	ld	(hl),#0x01
                            611 ;widgets.c:129: checkbox->widget.callback = NULL;
   02FC 21 06 00      [10]  612 	ld	hl,#0x0006
   02FF 19            [11]  613 	add	hl,de
   0300 AF            [ 4]  614 	xor	a, a
   0301 77            [ 7]  615 	ld	(hl), a
   0302 23            [ 6]  616 	inc	hl
   0303 77            [ 7]  617 	ld	(hl), a
                            618 ;widgets.c:130: checkbox->widget.dirty = 0;
   0304 21 05 00      [10]  619 	ld	hl,#0x0005
   0307 19            [11]  620 	add	hl,de
   0308 36 00         [10]  621 	ld	(hl),#0x00
                            622 ;widgets.c:132: checkbox->checked = 0;
   030A 21 08 00      [10]  623 	ld	hl,#0x0008
   030D 19            [11]  624 	add	hl,de
   030E 36 00         [10]  625 	ld	(hl),#0x00
                            626 ;widgets.c:134: return checkbox;
   0310 EB            [ 4]  627 	ex	de,hl
   0311 C9            [10]  628 	ret
                            629 ;widgets.c:137: void checkbox_setValue(T_Checkbox *checkbox, unsigned char checked) {
                            630 ;	---------------------------------
                            631 ; Function checkbox_setValue
                            632 ; ---------------------------------
   0312                     633 _checkbox_setValue::
                            634 ;widgets.c:138: if (checkbox != NULL) {
   0312 21 03 00      [10]  635 	ld	hl, #2+1
   0315 39            [11]  636 	add	hl, sp
   0316 7E            [ 7]  637 	ld	a, (hl)
   0317 2B            [ 6]  638 	dec	hl
   0318 B6            [ 7]  639 	or	a,(hl)
   0319 C8            [11]  640 	ret	Z
                            641 ;widgets.c:139: checkbox->checked = checked ? -1 : 0;
   031A D1            [10]  642 	pop	de
   031B C1            [10]  643 	pop	bc
   031C C5            [11]  644 	push	bc
   031D D5            [11]  645 	push	de
   031E 21 08 00      [10]  646 	ld	hl,#0x0008
   0321 09            [11]  647 	add	hl,bc
   0322 FD 21 04 00   [14]  648 	ld	iy,#4
   0326 FD 39         [15]  649 	add	iy,sp
   0328 FD 7E 00      [19]  650 	ld	a,0 (iy)
   032B B7            [ 4]  651 	or	a, a
   032C 28 04         [12]  652 	jr	Z,00105$
   032E 3E FF         [ 7]  653 	ld	a,#0xFF
   0330 18 02         [12]  654 	jr	00106$
   0332                     655 00105$:
   0332 3E 00         [ 7]  656 	ld	a,#0x00
   0334                     657 00106$:
   0334 77            [ 7]  658 	ld	(hl),a
                            659 ;widgets.c:140: checkbox->widget.dirty = 1;
   0335 21 05 00      [10]  660 	ld	hl,#0x0005
   0338 09            [11]  661 	add	hl,bc
   0339 36 01         [10]  662 	ld	(hl),#0x01
   033B C9            [10]  663 	ret
                            664 ;widgets.c:144: void checkbox_changeValue(T_Checkbox *checkbox) {
                            665 ;	---------------------------------
                            666 ; Function checkbox_changeValue
                            667 ; ---------------------------------
   033C                     668 _checkbox_changeValue::
   033C DD E5         [15]  669 	push	ix
   033E DD 21 00 00   [14]  670 	ld	ix,#0
   0342 DD 39         [15]  671 	add	ix,sp
                            672 ;widgets.c:145: if (checkbox != NULL) {
   0344 DD 7E 05      [19]  673 	ld	a,5 (ix)
   0347 DD B6 04      [19]  674 	or	a,4 (ix)
   034A 28 1D         [12]  675 	jr	Z,00103$
                            676 ;widgets.c:146: checkbox->checked = !checkbox->checked;
   034C DD 5E 04      [19]  677 	ld	e,4 (ix)
   034F DD 56 05      [19]  678 	ld	d,5 (ix)
   0352 FD 21 08 00   [14]  679 	ld	iy,#0x0008
   0356 FD 19         [15]  680 	add	iy, de
   0358 FD 7E 00      [19]  681 	ld	a, 0 (iy)
   035B D6 01         [ 7]  682 	sub	a,#0x01
   035D 3E 00         [ 7]  683 	ld	a,#0x00
   035F 17            [ 4]  684 	rla
   0360 FD 77 00      [19]  685 	ld	0 (iy), a
                            686 ;widgets.c:147: checkbox->widget.dirty = 1;
   0363 21 05 00      [10]  687 	ld	hl,#0x0005
   0366 19            [11]  688 	add	hl,de
   0367 36 01         [10]  689 	ld	(hl),#0x01
   0369                     690 00103$:
   0369 DD E1         [14]  691 	pop	ix
   036B C9            [10]  692 	ret
                            693 ;widgets.c:151: void checkbox_redraw(T_Checkbox *checkbox) {
                            694 ;	---------------------------------
                            695 ; Function checkbox_redraw
                            696 ; ---------------------------------
   036C                     697 _checkbox_redraw::
   036C DD E5         [15]  698 	push	ix
   036E DD 21 00 00   [14]  699 	ld	ix,#0
   0372 DD 39         [15]  700 	add	ix,sp
   0374 F5            [11]  701 	push	af
                            702 ;widgets.c:152: unsigned char *dst = SCRPTR(checkbox->widget.layout.x, checkbox->widget.layout.y);
   0375 DD 4E 04      [19]  703 	ld	c,4 (ix)
   0378 DD 46 05      [19]  704 	ld	b,5 (ix)
   037B 69            [ 4]  705 	ld	l, c
   037C 60            [ 4]  706 	ld	h, b
   037D 23            [ 6]  707 	inc	hl
   037E 5E            [ 7]  708 	ld	e,(hl)
   037F 16 00         [ 7]  709 	ld	d,#0x00
   0381 69            [ 4]  710 	ld	l, c
   0382 60            [ 4]  711 	ld	h, b
   0383 23            [ 6]  712 	inc	hl
   0384 23            [ 6]  713 	inc	hl
   0385 6E            [ 7]  714 	ld	l,(hl)
   0386 26 00         [ 7]  715 	ld	h,#0x00
   0388 29            [11]  716 	add	hl, hl
   0389 29            [11]  717 	add	hl, hl
   038A 29            [11]  718 	add	hl, hl
   038B D5            [11]  719 	push	de
   038C 5D            [ 4]  720 	ld	e, l
   038D 54            [ 4]  721 	ld	d, h
   038E 29            [11]  722 	add	hl, hl
   038F 29            [11]  723 	add	hl, hl
   0390 19            [11]  724 	add	hl, de
   0391 29            [11]  725 	add	hl, hl
   0392 29            [11]  726 	add	hl, hl
   0393 29            [11]  727 	add	hl, hl
   0394 29            [11]  728 	add	hl, hl
   0395 D1            [10]  729 	pop	de
   0396 19            [11]  730 	add	hl,de
   0397 EB            [ 4]  731 	ex	de,hl
                            732 ;widgets.c:154: if (checkbox->checked) {
   0398 C5            [11]  733 	push	bc
   0399 FD E1         [14]  734 	pop	iy
   039B FD 6E 08      [19]  735 	ld	l,8 (iy)
                            736 ;widgets.c:155: *dst = 0xFC; *(dst+1) = 0x3F;
   039E D5            [11]  737 	push	de
   039F FD E1         [14]  738 	pop	iy
   03A1 FD 23         [10]  739 	inc	iy
                            740 ;widgets.c:156: dst += 80;
   03A3 7B            [ 4]  741 	ld	a,e
   03A4 C6 50         [ 7]  742 	add	a, #0x50
   03A6 DD 77 FE      [19]  743 	ld	-2 (ix),a
   03A9 7A            [ 4]  744 	ld	a,d
   03AA CE 00         [ 7]  745 	adc	a, #0x00
   03AC DD 77 FF      [19]  746 	ld	-1 (ix),a
                            747 ;widgets.c:154: if (checkbox->checked) {
   03AF 7D            [ 4]  748 	ld	a,l
   03B0 B7            [ 4]  749 	or	a, a
   03B1 28 43         [12]  750 	jr	Z,00102$
                            751 ;widgets.c:155: *dst = 0xFC; *(dst+1) = 0x3F;
   03B3 3E FC         [ 7]  752 	ld	a,#0xFC
   03B5 12            [ 7]  753 	ld	(de),a
   03B6 FD 36 00 3F   [19]  754 	ld	0 (iy), #0x3F
                            755 ;widgets.c:156: dst += 80;
   03BA D1            [10]  756 	pop	de
   03BB D5            [11]  757 	push	de
                            758 ;widgets.c:157: *dst = 0x0C; *(dst+1) = 0x30;
   03BC 3E 0C         [ 7]  759 	ld	a,#0x0C
   03BE 12            [ 7]  760 	ld	(de),a
   03BF 6B            [ 4]  761 	ld	l, e
   03C0 62            [ 4]  762 	ld	h, d
   03C1 23            [ 6]  763 	inc	hl
   03C2 36 30         [10]  764 	ld	(hl),#0x30
                            765 ;widgets.c:158: dst += 80;
   03C4 21 50 00      [10]  766 	ld	hl,#0x0050
   03C7 19            [11]  767 	add	hl,de
   03C8 EB            [ 4]  768 	ex	de,hl
                            769 ;widgets.c:159: *dst = 0xCC; *(dst+1) = 0x33;
   03C9 3E CC         [ 7]  770 	ld	a,#0xCC
   03CB 12            [ 7]  771 	ld	(de),a
   03CC 6B            [ 4]  772 	ld	l, e
   03CD 62            [ 4]  773 	ld	h, d
   03CE 23            [ 6]  774 	inc	hl
   03CF 36 33         [10]  775 	ld	(hl),#0x33
                            776 ;widgets.c:160: dst += 80;
   03D1 21 50 00      [10]  777 	ld	hl,#0x0050
   03D4 19            [11]  778 	add	hl,de
   03D5 EB            [ 4]  779 	ex	de,hl
                            780 ;widgets.c:161: *dst = 0xCC; *(dst+1) = 0x33;
   03D6 3E CC         [ 7]  781 	ld	a,#0xCC
   03D8 12            [ 7]  782 	ld	(de),a
   03D9 6B            [ 4]  783 	ld	l, e
   03DA 62            [ 4]  784 	ld	h, d
   03DB 23            [ 6]  785 	inc	hl
   03DC 36 33         [10]  786 	ld	(hl),#0x33
                            787 ;widgets.c:162: dst += 80;
   03DE 21 50 00      [10]  788 	ld	hl,#0x0050
   03E1 19            [11]  789 	add	hl,de
   03E2 EB            [ 4]  790 	ex	de,hl
                            791 ;widgets.c:163: *dst = 0x0C; *(dst+1) = 0x30;
   03E3 3E 0C         [ 7]  792 	ld	a,#0x0C
   03E5 12            [ 7]  793 	ld	(de),a
   03E6 6B            [ 4]  794 	ld	l, e
   03E7 62            [ 4]  795 	ld	h, d
   03E8 23            [ 6]  796 	inc	hl
   03E9 36 30         [10]  797 	ld	(hl),#0x30
                            798 ;widgets.c:164: dst += 80;
   03EB 21 50 00      [10]  799 	ld	hl,#0x0050
   03EE 19            [11]  800 	add	hl,de
                            801 ;widgets.c:165: *dst = 0xFC; *(dst+1) = 0x3F;
   03EF 36 FC         [10]  802 	ld	(hl),#0xFC
   03F1 23            [ 6]  803 	inc	hl
   03F2 36 3F         [10]  804 	ld	(hl),#0x3F
   03F4 18 41         [12]  805 	jr	00103$
   03F6                     806 00102$:
                            807 ;widgets.c:167: *dst = 0xFC; *(dst+1) = 0x3F;
   03F6 3E FC         [ 7]  808 	ld	a,#0xFC
   03F8 12            [ 7]  809 	ld	(de),a
   03F9 FD 36 00 3F   [19]  810 	ld	0 (iy), #0x3F
                            811 ;widgets.c:168: dst += 80;
   03FD D1            [10]  812 	pop	de
   03FE D5            [11]  813 	push	de
                            814 ;widgets.c:169: *dst = 0x0C; *(dst+1) = 0x30;
   03FF 3E 0C         [ 7]  815 	ld	a,#0x0C
   0401 12            [ 7]  816 	ld	(de),a
   0402 6B            [ 4]  817 	ld	l, e
   0403 62            [ 4]  818 	ld	h, d
   0404 23            [ 6]  819 	inc	hl
   0405 36 30         [10]  820 	ld	(hl),#0x30
                            821 ;widgets.c:170: dst += 80;
   0407 21 50 00      [10]  822 	ld	hl,#0x0050
   040A 19            [11]  823 	add	hl,de
   040B EB            [ 4]  824 	ex	de,hl
                            825 ;widgets.c:171: *dst = 0x0C; *(dst+1) = 0x30;
   040C 3E 0C         [ 7]  826 	ld	a,#0x0C
   040E 12            [ 7]  827 	ld	(de),a
   040F 6B            [ 4]  828 	ld	l, e
   0410 62            [ 4]  829 	ld	h, d
   0411 23            [ 6]  830 	inc	hl
   0412 36 30         [10]  831 	ld	(hl),#0x30
                            832 ;widgets.c:172: dst += 80;
   0414 21 50 00      [10]  833 	ld	hl,#0x0050
   0417 19            [11]  834 	add	hl,de
   0418 EB            [ 4]  835 	ex	de,hl
                            836 ;widgets.c:173: *dst = 0x0C; *(dst+1) = 0x30;
   0419 3E 0C         [ 7]  837 	ld	a,#0x0C
   041B 12            [ 7]  838 	ld	(de),a
   041C 6B            [ 4]  839 	ld	l, e
   041D 62            [ 4]  840 	ld	h, d
   041E 23            [ 6]  841 	inc	hl
   041F 36 30         [10]  842 	ld	(hl),#0x30
                            843 ;widgets.c:174: dst += 80;
   0421 21 50 00      [10]  844 	ld	hl,#0x0050
   0424 19            [11]  845 	add	hl,de
   0425 EB            [ 4]  846 	ex	de,hl
                            847 ;widgets.c:175: *dst = 0x0C; *(dst+1) = 0x30;
   0426 3E 0C         [ 7]  848 	ld	a,#0x0C
   0428 12            [ 7]  849 	ld	(de),a
   0429 6B            [ 4]  850 	ld	l, e
   042A 62            [ 4]  851 	ld	h, d
   042B 23            [ 6]  852 	inc	hl
   042C 36 30         [10]  853 	ld	(hl),#0x30
                            854 ;widgets.c:176: dst += 80;
   042E 21 50 00      [10]  855 	ld	hl,#0x0050
   0431 19            [11]  856 	add	hl,de
                            857 ;widgets.c:177: *dst = 0xFC; *(dst+1) = 0x3F;
   0432 36 FC         [10]  858 	ld	(hl),#0xFC
   0434 23            [ 6]  859 	inc	hl
   0435 36 3F         [10]  860 	ld	(hl),#0x3F
   0437                     861 00103$:
                            862 ;widgets.c:179: checkbox->widget.dirty = 0;
   0437 21 05 00      [10]  863 	ld	hl,#0x0005
   043A 09            [11]  864 	add	hl,bc
   043B 36 00         [10]  865 	ld	(hl),#0x00
   043D DD F9         [10]  866 	ld	sp, ix
   043F DD E1         [14]  867 	pop	ix
   0441 C9            [10]  868 	ret
                            869 ;widgets.c:182: void draw_label(unsigned char x, unsigned char y, char *text) {
                            870 ;	---------------------------------
                            871 ; Function draw_label
                            872 ; ---------------------------------
   0442                     873 _draw_label::
   0442 DD E5         [15]  874 	push	ix
   0444 DD 21 00 00   [14]  875 	ld	ix,#0
   0448 DD 39         [15]  876 	add	ix,sp
                            877 ;widgets.c:183: unsigned char *dst = SCRPTR(x, y);
   044A DD 5E 04      [19]  878 	ld	e,4 (ix)
   044D 16 00         [ 7]  879 	ld	d,#0x00
   044F DD 6E 05      [19]  880 	ld	l,5 (ix)
   0452 26 00         [ 7]  881 	ld	h,#0x00
   0454 29            [11]  882 	add	hl, hl
   0455 29            [11]  883 	add	hl, hl
   0456 29            [11]  884 	add	hl, hl
   0457 4D            [ 4]  885 	ld	c, l
   0458 44            [ 4]  886 	ld	b, h
   0459 29            [11]  887 	add	hl, hl
   045A 29            [11]  888 	add	hl, hl
   045B 09            [11]  889 	add	hl, bc
   045C 29            [11]  890 	add	hl, hl
   045D 29            [11]  891 	add	hl, hl
   045E 29            [11]  892 	add	hl, hl
   045F 29            [11]  893 	add	hl, hl
   0460 19            [11]  894 	add	hl,de
   0461 5D            [ 4]  895 	ld	e, l
   0462 54            [ 4]  896 	ld	d, h
                            897 ;widgets.c:184: char *p = text;
   0463 DD 4E 06      [19]  898 	ld	c,6 (ix)
   0466 DD 46 07      [19]  899 	ld	b,7 (ix)
                            900 ;widgets.c:187: while(c = *p++) text_char(dst++, c);
   0469                     901 00101$:
   0469 0A            [ 7]  902 	ld	a,(bc)
   046A 03            [ 6]  903 	inc	bc
   046B 67            [ 4]  904 	ld	h,a
   046C B7            [ 4]  905 	or	a, a
   046D 28 13         [12]  906 	jr	Z,00104$
   046F D5            [11]  907 	push	de
   0470 FD E1         [14]  908 	pop	iy
   0472 13            [ 6]  909 	inc	de
   0473 C5            [11]  910 	push	bc
   0474 D5            [11]  911 	push	de
   0475 E5            [11]  912 	push	hl
   0476 33            [ 6]  913 	inc	sp
   0477 FD E5         [15]  914 	push	iy
   0479 CDr00r00      [17]  915 	call	_text_char
   047C F1            [10]  916 	pop	af
   047D 33            [ 6]  917 	inc	sp
   047E D1            [10]  918 	pop	de
   047F C1            [10]  919 	pop	bc
   0480 18 E7         [12]  920 	jr	00101$
   0482                     921 00104$:
   0482 DD E1         [14]  922 	pop	ix
   0484 C9            [10]  923 	ret
                            924 	.area _CODE
                            925 	.area _INITIALIZER
                            926 	.area _CABS (ABS)
